import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
movie_data=pd.read_csv("C:\\Users\\yoges\\Desktop\\CODSOFT\\IMDb Movies India.csv",encoding="latin1")
movie_data
movie_data.head()
movie_data.info()
movie_data.describe()
movie_data.isnull().sum()
movie_data.dropna(subset=["Rating"], inplace = True)
movie_data.isnull().sum()
movie_data.dropna(subset=['Actor 1', 'Actor 2', 'Actor 3','Director','Genre'],inplace=True)
movie_data.head()
movie_data['Votes'] = movie_data['Votes'].str.replace(',','').astype(int)
movie_data['Year'] = movie_data['Year'].str.strip('()').astype(int)
movie_data['Duration'] = movie_data['Duration'].str.strip('min')
movie_data['Duration'].fillna(movie_data['Duration'].median(),inplace=True)
movie_data.isnull().sum()
movie_data.info()
movie_data.head()
top_movie = movie_data.loc[movie_data['Rating'].sort_values(ascending=False)[:10].index]
top_movie
import seaborn as sns
sns.histplot(data=top_movie, x="Year",hue="Rating")
plt.title('Distribution of Top 10 Movies', fontsize=16)
plt.xlabel('Year',fontsize=14)
plt.ylabel('Rating',fontsize=14)
plt.tight_layout()
plt.show()
genre_counts=movie_data['Genre'].value_counts().reset_index()
genre_counts.columns=['Genre','Count']

top_n_genres=genre_counts.head(5)
top_n_genres
plt.figure(figsize=(4, 4))
plt.pie(top_n_genres['Count'], labels=top_n_genres['Genre'], autopct='%1.1f%%', startangle=140, colors=sns.color_palette('pastel'))
plt.title('Movie Genre Distribution',fontsize=20)
plt.axis('equal')
plt.show()
director_avg_rating=movie_data.groupby('Director')['Rating'].mean().reset_index()
director_avg_rating=director_avg_rating.sort_values(by='Rating',ascending=False)

top_directors=director_avg_rating.head(10)
top_directors
plt.figure(figsize=(12,6))
sns.barplot(data=top_directors, x="Rating",y="Director",palette='viridis')
plt.title('Top Directors by Average Rating', fontsize=30)
plt.xlabel('Average Rating',fontsize=14)
plt.ylabel('Director',fontsize=30)

plt.show()
plt.figure(figsize=(12,6))
sns.lineplot(data=movie_data, x="Rating",y="Votes")
plt.title('Votes vs Rating', fontsize=30)
plt.xlabel('Rating',fontsize=25)
plt.ylabel('Votes',fontsize=30)

plt.show()
actor_counts=movie_data['Actor 1'].value_counts().reset_index()
actor_counts.columns=['Actor','MovieCount']

top_n_actors=actor_counts.head(10)
top_n_actors
plt.figure(figsize=(12,6))
sns.barplot(data=top_n_actors, x="MovieCount",y="Actor",orient='h')
plt.title('Top Actors by Number of Movies', fontsize=30)
plt.xlabel('Number of Movie',fontsize=25)
plt.ylabel('actor',fontsize=30)

plt.show()
yearly_movie_counts=movie_data['Year'].value_counts().reset_index()
yearly_movie_counts.columns=['Year','MovieCounts']

yearly_movie_counts=yearly_movie_counts.sort_values(by='Year')
yearly_movie_counts
plt.figure(figsize=(12,6))
sns.lineplot(data=yearly_movie_counts, x='Year',y='MovieCounts')
plt.title('Number of Movies Released Every Year', fontsize=30)
plt.xlabel('Year',fontsize=30)
plt.ylabel('Number of Movies Released',fontsize=20)

plt.show()
filtered_df=movie_data[(movie_data['Rating']>8)&(movie_data['Votes']>10000)]
filtered_df.head(10)
plt.figure(figsize=(15,6))
ax=sns.barplot(data=filtered_df, x='Name',y='Votes',hue='Rating',dodge=False,width=0.5,palette='muted')

ax.set_xticklabels(ax.get_xticklabels(),rotation=90,ha='right')
ax.legend(loc='upper right')
ax.set_xlabel('Movie Name')
ax.set_ylabel('Votes')
ax.set_title('Movie with rating greater than 8 and votes greater than 10000')

plt.show()
movie_data['Duration']=movie_data['Duration']=movie_data['Duration'].astype(int)
movie_data['Year']=movie_data['Year'].astype(int)

plt.figure(figsize=(12,6))
sns.lineplot(data=movie_data,x='Year',y='Duration',errorbar=None)
plt.xlabel('Year')
plt.ylabel('Duration in minutes')
plt.title('Duration of movies by year')
plt.xticks(np.arange(1917,2024,6))

plt.show
movie_data['Genre']=movie_data['Genre'].str.split(',')

genre_df=movie_data.explode('Genre')
genre_df
plt.figure(figsize=(12,6))
sns.countplot(data=genre_df,x='Genre',order=genre_df['Genre'].value_counts().index,palette='viridis')

plt.title('Number of Movies for Each Genre',fontsize=16)
plt.xlabel('Number of Movies',fontsize=14)
plt.ylabel('Genre',fontsize=14)
plt.xticks(rotation=90)

plt.show
average_rating_by_genre=genre_df.groupby('Genre')['Rating'].mean().reset_index()
average_rating_by_genre=average_rating_by_genre.sort_values(by='Rating',ascending=False)
plt.figure(figsize=(15,5))
sns.barplot(data=average_rating_by_genre,y='Rating',x='Genre',palette='coolwarm')

plt.xlabel('Genre')
plt.ylabel('Average Rating')
plt.title('Average rating of movies in each genre')
plt.xticks(rotation=90)

plt.show
from sklearn.preprocessing import LabelEncoder
labelencoder=LabelEncoder()

trans_data=movie_data.drop(['Name'],axis=1)
trans_data['Director']=labelencoder.fit_transform(movie_data['Director'])

trans_data['Actor 1']=labelencoder.fit_transform(movie_data['Actor 1'])
trans_data['Actor 2']=labelencoder.fit_transform(movie_data['Actor 2'])
trans_data['Actor 3']=labelencoder.fit_transform(movie_data['Actor 3'])

trans_data['Genre']=labelencoder.fit_transform(movie_data['Genre'].apply(lambda x: ','.join(x)))
trans_data.head()
from sklearn.preprocessing import MinMaxScaler

scaler=MinMaxScaler()
sc_data=scaler.fit_transform(trans_data)
sc_df=pd.DataFrame(sc_data,columns=trans_data.columns)

sc_df.head()
corr_df=trans_data.corr(numeric_only=True)
corr_df['Rating'].sort_values(ascending=False)
sns.heatmap(corr_df,annot=False,cmap="coolwarm")
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error,mean_absolute_error,r2_score
x=trans_data.drop(['Rating'],axis=1)
y=trans_data['Rating']
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=42)
model=LinearRegression()
model.fit(x_train,y_train)
x_test=np.array(x_test)
y_pred=model.predict(x_test)
y_pred
print('R2 score:',r2_score(y_test,y_pred))
print('Mean squared error:',mean_squared_error(y_test,y_pred))
print('Mean absolute error:',mean_absolute_error(y_test,y_pred))
print(y_test)
